Yhdistä catalog ja inventory

PriceUpdate event menee catalogilta basketille

---
https://ardalis.com/running-integration-tests-in-build-pipelines-with-a-real-database/

Deploying a Docker Container in Azure App Service using an Azure DevOps Pipeline
https://www.youtube.com/watch?v=xubKJB5MjXA

Envoy ja sertifikaatit
https://myview.rahulnivi.net/api-gateway-envoy-docker/

Understanding the Basics of Envoy Configuration
https://www.youtube.com/watch?v=E-UpGmj6B9M

web-app-container
https://registry.terraform.io/modules/innovationnorway/web-app-container/azurerm/latest

AKV + Terraform + App service
https://medium.com/pernod-ricard-tech/how-to-properly-manage-secrets-in-azure-app-service-with-terraform-44bc1ab99a02

1:21:00 eteenpäin sertifikaattien asennus
https://www.youtube.com/watch?v=UsoH5cqE1OA

eShopOnContainers
https://github.com/dotnet-architecture/eShopOnContainers/tree/dev/src/Services/Catalog/Catalog.API

Responsive apps resocoder
https://resocoder.com/2021/10/03/create-responsive-flutter-apps-with-minimal-effort/

Deploying a Docker based web application to Azure App Service
https://azuredevopslabs.com/labs/vstsextend/docker/

Building a Responsive UI Architecture in Flutter
https://www.filledstacks.com/post/building-a-responsive-ui-architecture-in-flutter/

The Best Flutter Responsive UI Pattern
https://www.filledstacks.com/post/the-best-flutter-responsive-ui-pattern/

A Responsive UI Architecture Solution with Provider
https://www.filledstacks.com/post/a-responsive-ui-architecture-solution-with-provider/

Building a Responsive Website using Flutter
https://www.filledstacks.com/post/building-a-responsive-website-using-flutter/

Flutter State
https://www.filledstacks.com/post/new-setup-for-flutter-stacked-state-management/
https://www.filledstacks.com/post/flutter-state-management-with-stacked/

Tarkista Autoroute (tms) package Flutterissa?

Microservices Architecture on .NET with applying CQRS, Clean Architecture and Event-Driven Communication
https://medium.com/aspnetrun/microservices-architecture-on-net-3b4865eea03f

Domain events
https://github.com/dotnet/docs/blob/main/docs/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation.md
https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation

-----
Envoy

Listeners: 
- Tapa jolla envoy vastaanottaa kutsuja
  > Ip osoite ja portti. 
  > 0 taroittaa mikä tahansa osoite
  > Kuorma sidotaan IP ositteeseen ja porttiin ja lähetetään lopulliseen osoitteeseen
Filtters:
- Löytyvät listenereiltä
- Manipuloidaan kuormaa
- TCP proxy filter
- HTTP filter pystyy käyttämään kaikkea HTTP kutsun tietoja filtteröintiin. Mitä tehdään tälle kutsulle?
  > HTTP filter mahdollistaa Routes käytön
  > Tämä on se mitä halutaan!
Cluster:
- Flitterit lähettävät kutsun clusterille
- Määrittää kutsujen päämäärän
- Clusterilla on yksi tai enemmän endpointteja
- Loadbalancer (alogirtmi voi olla esim round robint jne.)
Endpoint:
- Lopullinen päämäärä johon kutsu lähetetään clustrilta

----
Domain events
- Toteuta aggregaten sivuvaikutuksia ("side effects")
- On mahdollista että ajan myötä sivuvaikutusten määrä kasvaa. Tällä tavalla helppo lisätä ominaisuuksia ja tehdä automaattitestejä. Toteuttaa Open Closed Principlen.
- Normaalisti eventin toteuttava logiikka kirjoitetaan sinne missä eventti laukaistaan, mutta tällöin kyseinen logiikka on sidottu tähän osaan koodista. 
- Domain eventit auttavat toteuttamaan logiikan erilleen. Auttaa toteuttamaan domain säännön helposti ymmärrettävällä tavalla (?).
- Kaikki kuuntelijoiden koodi suoritetaan tai ei minkään niistä.
- Käytetään BoundedContextin sisällä
- Synkronisia, ei käytä mitään erillistä viestijonoa kuten RabbitMQ:ta
- Toteutetaan in-memory mediatorin avulla
- Toteutetaan application layerin. Domainin tulee keskittyä vain domain logiikkaan. Event handler käyttää mm. repositoreja jotka on infrastructure layerillä toteutettuja joiden rajapinnat määritellään application layerillä.
- Event luokka on immutable

Integration events
- Asynkronisia
- Kuunnellaan toisessa BoundedContextissa tai järjestelmässä